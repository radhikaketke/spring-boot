package com.hospitalmanagementsystem.hms.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hospitalmanagementsystem.hms.dto.UserDto;
import com.hospitalmanagementsystem.hms.entity.Role;
import com.hospitalmanagementsystem.hms.entity.User;
import com.hospitalmanagementsystem.hms.service.UserService;

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired 
    private UserService userService;
   
    @PostMapping("/register")
    public User registerUser(@RequestBody UserDto userDto) {
        return userService.save(userDto);
    }

    @PostMapping("/login")
    public ResponseEntity<String> loginUser(@RequestBody UserDto userDto) {
        String email = userDto.getEmail();
        String password = userDto.getPassword();

        User user = userService.findByEmail(email);
        if (user != null && user.getPassword().equals(password)) {
            Role role = user.getRole();
            if (role != null) {
                switch (role.getRoleName()) {
                    case "admin":
                        return ResponseEntity.ok("Login successful as admin");
                    case "staff":
                        return ResponseEntity.ok("Login successful as staff");
                    case "doctor":
                        return ResponseEntity.ok("Login successful as doctor");
                    case "patient":
                        return ResponseEntity.ok("Login successful as patient");
                    default:
                        return ResponseEntity.ok("Login successful with unknown role");
                }
            } else {
                return ResponseEntity.ok("User has no assigned role");
            }
        } else {
            return ResponseEntity.badRequest().body("Invalid email or password");
        }
    }

    @GetMapping("/logout/{id}")
    public ResponseEntity<String> logoutUser(@PathVariable Long id) {
        User user = userService.findById(id);
        if (user != null) {
        	response.sendRedirect("/login");
        	return ResponseEntity.ok("Logged out successfully");
        } else {
            return ResponseEntity.notFound().build();
        }
    }
 
}

